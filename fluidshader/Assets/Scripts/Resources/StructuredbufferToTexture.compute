
//kernels
#pragma kernel PressureStructuredToTexture
#pragma kernel VelocityStructuredToTexture
#pragma kernel DyeStructuredToTexture

#include "FluidDynamicUtility.cginc"

//declarations
StructuredBuffer<float4>   Pressure_StructuredToTexture_Source;
RWTexture2D<float4>        Pressure_StructuredToTexture_Results;
int                        Pressure_Results_Resolution;


//builds a structured buffer on top of a render texture for visualization
[numthreads(16, 16, 1)]
void PressureStructuredToTexture(uint3 id : SV_DispatchThreadID)
{
	float2 coord = (float2)id.xy / (float)(Pressure_Results_Resolution - 1); //first normalizes the thread IDs based on the targets resolution
	coord *= (float)(u_Resolution - 1);     //remapping as 2d IDs

	Pressure_StructuredToTexture_Results[id.xy] = StructuredBufferBilinearLoad(Pressure_StructuredToTexture_Source, coord);

}

//declarations
StructuredBuffer<float4>   Velocity_StructuredToTexture_Source;
RWTexture2D<float4>        Velocity_StructuredToTexture_Results;
int                        Velocity_Results_Resolution;

//builds structured buffer for velocity
[numthreads(16, 16, 1)]
void VelocityStructuredToTexture(uint3 id : SV_DispatchThreadID)
{
	float2 coord = (float2)id.xy / (float)(Velocity_Results_Resolution - 1);
	coord *= (float)(u_Resolution - 1);

	Velocity_StructuredToTexture_Results[id.xy] = StructuredBufferBilinearLoad(Velocity_StructuredToTexture_Source, coord);

}

//declarations
StructuredBuffer<float4>   Dye_StructuredToTexture_Source;
RWTexture2D<float4>        Dye_StructuredToTexture_Results;
int                        _Dye_Results_Resolution;


//builds structured buffer for dye
[numthreads(16, 16, 1)]
void DyeStructuredToTexture(uint3 id : SV_DispatchThreadID)
{
	float2 coord = (float2)id.xy / (float)(_Dye_Results_Resolution - 1);
	coord *= (float)(u_Resolution - 1);

	Dye_StructuredToTexture_Results[id.xy] = StructuredBufferBilinearLoad(Dye_StructuredToTexture_Source, coord);

}