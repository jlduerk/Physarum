// sparse matrix equation Ax = b
// decomp equation A  = D + L + U  => x_k+1 = D_Inverse * (b - (L + U) x_k)


//kerney

#pragma kernel Jacobi_Solve


//declarations

StructuredBuffer<float4>     _b_buffer;    //b constant in equatiosns
StructuredBuffer<float4>     _updated_x_buffer;    // k-1 jacobi, x iin our equation
RWStructuredBuffer<float4>   _results;    //swaps with updated later

int                          _current_iteration;   //debug 
float                        _rDiagonal;     //jacobi diag 
float                        _centerFactor; //coefficient of b


#include "FluidDynamicUtility.cginc"


//iterative method for solving for x in Ax = b
[numthreads(16, 16, 1)]                            //runs once for every equation variable that needs solving
void Jacobi_Solve(uint3 id : SV_DispatchThreadID)
{

	int2  coordinate = id.xy;


	float4 left = _updated_x_buffer[id2Dto1D(coordinate - int2(1, 0))];
	float4 right = _updated_x_buffer[id2Dto1D(coordinate + int2(1, 0))];
	float4 bottom = _updated_x_buffer[id2Dto1D(coordinate - int2(0, 1))];
	float4 top = _updated_x_buffer[id2Dto1D(coordinate + int2(0, 1))];

	float4 b_center = _b_buffer[id2Dto1D(coordinate)];

	_results[id2Dto1D(coordinate)] = (left + right + bottom + top + (_centerFactor * b_center)) * _rDiagonal;
}
