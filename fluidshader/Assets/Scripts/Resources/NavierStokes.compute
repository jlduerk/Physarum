//Navier stokes equation

//kernels <3
#pragma kernel advection
#pragma kernel divergence
#pragma kernel calculate_divergence_free

#include "FluidDynamicUtility.cginc"

//advection declarations

float     _dissipationFactor;  //how fast quantities dissapate 1 = lasts forever, 0 = instantly dissipates

StructuredBuffer<float4>   _velocity_field_buffer; 
StructuredBuffer<float4>   _field_to_advect_buffer; 

RWStructuredBuffer<float4> _new_advected_field;    //results of advection



//carries forces along fluid field by seeing what current velocity would bring to current cell
[numthreads(16, 16, 1)]
void advection(uint3 id : SV_DispatchThreadID)
{
    float2  coord = id.xy;     //one-to-one mapping with coordinate grid

    float2 advection_source_coord = coord - (i_timeStep *  _velocity_field_buffer[id2Dto1D(coord)] * (1. / i_grid_scale));   


    advection_source_coord = clamp(advection_source_coord, 0.0, u_Resolution - 1.0); //so velocity doesnt go out of bounds

    _new_advected_field[id2Dto1D(coord)] = _dissipationFactor * StructuredBufferBilinearLoad(_field_to_advect_buffer, advection_source_coord);
}


//divergence declarations

StructuredBuffer<float4>     _divergence_vector_field;  
RWStructuredBuffer<float4>   _divergence_values;   //resulting buffer



//how stuff flows in or out of a point, fluid sim math stuff
//Divergence = partial(field.x) / partial(x) + partial(field.y) / partial(y)
// partial(x) = partial(y) = 1.0/(2.0*cellSize)
[numthreads(16, 16, 1)]
void divergence(uint3 id : SV_DispatchThreadID)
{
    float partialXY = 2. * i_grid_scale;
    int2  coord = id.xy;

    float4 left = _divergence_vector_field[id2Dto1D(coord - int2(1, 0))];
    float4 right = _divergence_vector_field[id2Dto1D(coord + int2(1, 0))];
    float4 bottom = _divergence_vector_field[id2Dto1D(coord - int2(0, 1))];
    float4 top = _divergence_vector_field[id2Dto1D(coord + int2(0, 1))];

    _divergence_values[id2Dto1D(coord)] =
        ((right.x - left.x + top.y - bottom.y) * 1. / partialXY).xxxx;
}

//more declarations

StructuredBuffer<float4>    _non_zero_divergence_velocity_field;  //velocity field after advection
StructuredBuffer<float4>    _pressure_field;         //leplace(pressure_field) = divergence(velocity_field) 
RWStructuredBuffer<float4>  _pressure_gradient;                          
RWStructuredBuffer<float4>  _divergence_free_field;   //projection result


//free divergence calculation
//divergence_free_vector_field = non_zero_divergence_vector_field - gradient(pressure_field)
[numthreads(16, 16, 1)]                                                     
void calculate_divergence_free(uint3 id : SV_DispatchThreadID)
{
    float partialXY = 2. * i_grid_scale;
    int2 coord = id.xy;                                               

    float4 gradient_value = gradient(_pressure_field, partialXY, coord);

    //_pressure_gradient[id2Dto1D(coord)] = gradient_value; //for visual debuging

    _divergence_free_field[id2Dto1D(coord)] = _non_zero_divergence_velocity_field[id2Dto1D(coord)] - gradient_value;

}